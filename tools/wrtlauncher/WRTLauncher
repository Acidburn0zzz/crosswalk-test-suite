#!/usr/bin/python
#
# Copyright (c) 2012 Intel Corporation. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Authors:
#     Li, Huajun <huajun.li@intel.com>
#     Fan, Yugang <yugang.fan@intel.com>
#

import os
import sys
import time
import signal
import commands

wgt_launcher  = "wrt-launcher"
crx_launcher  = "chromium-browser"
launcher_list = [wgt_launcher, crx_launcher]
crx_launcher_params = """  --enable-plugins --enable-device-motion --enable-extensions --enable-user-scripts --enable-printing --enable-sync --enable-experimental-extension-apis --disable-accelerated-2d-canvas --use-gl=egl --ignore-gpu-blacklist --gpu-no-context-lost --auto-ssl-client-auth"""
crx_launcher_conf = "/.config/chromium/Default/Preferences"

pkg_id = ""
pid = ""
def on_signal(signum, stackframe):
    """
        Handle system exit handler.
    """
    if get_launcher() == wgt_launcher:
        if pkg_id:
            os.system("%s -k %s > /dev/null 2>&1" % (wgt_launcher, pkg_id));
    elif pid:
        os.system("kill %s" % pid);
    else:
        print "Can't clean the sub processes ..."

    os._exit(1)
    return 0

def usage():
    print '''Usage: WRTLauncher  widget_name'''
    print '''Example: if your installed widget is "my_widget.wgt" or "my_widget.crx", you can launcher it by:  WRTLauncher my_widget'''

def get_launcher():
    launcher = ""
    for i in range(len(launcher_list)):
        ret = commands.getstatusoutput("which %s > /dev/null 2>&1" % launcher_list[i])
        if ret[0] == 0:
            launcher = launcher_list[i]
            break

    return launcher

if __name__ == "__main__":
    if (len(sys.argv) < 2):
        usage()
        sys.exit(1)

    testsuite = sys.argv[1]
    launcher = get_launcher()

    cmd = ""
    pkg_root = ""
    if not launcher:
        print "No lanucher found ..."
        sys.exit(-1)

    print "Find web runtime launcher: " + launcher
    signal.signal(signal.SIGINT, on_signal)

    if launcher == wgt_launcher:
        cmd = "%s -l 2> /dev/null | grep %s | tail -n 1 | awk '{ print $NF }'" % ("wrt-launcher", testsuite)
        pkg_id = commands.getoutput(cmd)
        if pkg_id:
            check_cmd="%s -r %s > /dev/null 2>&1" % (wgt_launcher, pkg_id)
            kill_cmd="%s -k %s > /dev/null 2>&1" % (wgt_launcher, pkg_id)
            launch_cmd="%s -s %s > /dev/null 2>&1" % (wgt_launcher, pkg_id)
            i=3
            while i > 0:
                i = i - 1
                ret = commands.getstatusoutput(check_cmd)
                if ret[0] == 0:
                    print "Kill the running wgt %s" % pkg_id
                    commands.getstatusoutput(kill_cmd)
                    #Enough time for other WRTLanucher exiting.
                    time.sleep(2)

                ret = commands.getstatusoutput(launch_cmd)
                if ret[0] == 0:
                    print "Successfull to launch wgt %s" % pkg_id
                    break
                else:
                    if i <= 0:
                        print "Fail to launch %s by %s" % (pkg_id, wgt_launcher)
                        sys.exit(-1)
                    else:
                        print "Fail to execute %s, try again ..." % launch_cmd
                time.sleep(1)
            while True:
                time.sleep(1)
                ret = commands.getstatusoutput(check_cmd)
                if ret[0] != 0:
                    print "Exit from wgt %s" % pkg_id
                    break
        else:
            print "Fail to find wgt package id of test suite %s" % testsuite
            sys.exit(-1)
    elif launcher == crx_launcher:
        try:
            import subprocess
            #unpacked crx location is created while installing rpm package of the test suite
            crx_location = "/opt/unpacked_crx/" + testsuite
            if not os.path.isdir(crx_location):
                print "No such unpacked crx test suite \"%s\"" % crx_location
                sys.exit(-1)

            inst_crx_cmd = launcher + "  --load-extension=" + crx_location
            proc = subprocess.Popen(inst_crx_cmd, shell=True)
            #Wait for browser installs the pkg
            time.sleep(5)
            proc.terminate()
            #Wait for browser updates its configuration file
            time.sleep(5)
        except Exception, e:
            print "Exception occurs while installing the unpacked test suite \"%s\"" % crx_location
            sys.exit(-1)

        try:
            import json
            home = commands.getoutput("echo $HOME")
            crx_launcher_conf = home + crx_launcher_conf
            if os.path.isfile(crx_launcher_conf):
                conf = json.loads(open(crx_launcher_conf).read())
                if conf["extensions"] and conf["extensions"]["settings"]:
                    settings = conf["extensions"]["settings"]
                    for ext_id in settings:
                        ext = settings[ext_id]
                        for key in ext:
                            if (key == "path") and (ext[key].endswith(testsuite)):
                                pkg_id = ext_id
                                pkg_root = ext[key]
                                break

                        if pkg_id and pkg_root:
                            break #break loop: for ext_id in settings:
        except Exception, e:
            print "Exception occurs while finding package id of testsuite \"testsuite\""

        if pkg_id and pkg_root:
            cmd = "%s %s chrome-extension://%s/index.html" % (launcher, crx_launcher_params, pkg_id)
            os.system(cmd)
        else:
            print "Fail to find package id of test suite \"%s\"" % testsuite
