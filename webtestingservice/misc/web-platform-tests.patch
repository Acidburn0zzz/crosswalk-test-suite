diff --git a/config.default.json b/config.default.json
index 9216cab..7df6673 100644
--- a/config.default.json
+++ b/config.default.json
@@ -1,7 +1,7 @@
-{"host": "web-platform.test",
- "ports":{"http":[8000, "auto"],
-          "https":["auto"],
-          "ws":["auto"]},
+{"host": "MACRO_IPADDR",
+ "ports":{"http":[8000, 8001],
+          "https":[8002],
+          "ws":[8003]},
  "external_domain":"w3c-test.org",
  "check_subdomains": true,
  "log_level":"debug",
diff --git a/serve.py b/serve.py
index 582b9be..4c91a5c 100644
--- a/serve.py
+++ b/serve.py
@@ -94,7 +94,7 @@ class ServerProc(object):
         self.proc.join()
 
 def check_subdomains(config, paths, subdomains, bind_hostname):
-    port = get_port()
+    port = 8004
     wrapper = ServerProc()
     wrapper.start(start_http_server, config, paths, port, bind_hostname)
 
diff --git a/tools/runner/index.html b/tools/runner/index.html
index 135c914..36945bf 100644
--- a/tools/runner/index.html
+++ b/tools/runner/index.html
@@ -27,7 +27,11 @@ Include test types:<br>
 <label><input type=checkbox checked value="reftest">Reftests</label><br>
 <label><input type=checkbox checked value="manual">Manual tests</label>
 <p><label>Run tests under path <input value="/" class="path"><button class="togglePause" disabled>Pause</button><button class="toggleStart">Start</button></label>
-</header>
+<p>Run tests in: <label><input name="runMode" type=checkbox value="iframe">iframe</label>
+</div>
+
+<div id="runMode">
+<iframe id="testFrame"></iframe>
 </div>
 
 <div id="output">
diff --git a/tools/runner/runner.css b/tools/runner/runner.css
index 68ddba2..9bb0171 100644
--- a/tools/runner/runner.css
+++ b/tools/runner/runner.css
@@ -38,4 +38,5 @@ html.done section + section { border-top: none; }
 
 body > p { text-align: center; }
 body > p > textarea { width: 90%; height: 20em; }
+iframe {width: 100%; height: 400px; frameborder: no; border: 0; marginwidth: 0; marginheight: 0; }
 
diff --git a/tools/runner/runner.js b/tools/runner/runner.js
index 0e09014..0e047df 100644
--- a/tools/runner/runner.js
+++ b/tools/runner/runner.js
@@ -326,7 +326,11 @@ TestControl.prototype = {
         this.start_button.onclick = (function() {
             var path = this.get_path();
             var test_types = this.get_test_types();
-            this.runner.start(path, test_types);
+            var run_mode = "window";
+            if (this.elem.querySelector("input[name=runMode]").checked) {
+                run_mode = "iframe";
+            }
+            this.runner.start(path, test_types, run_mode);
             this.set_stop();
             this.set_pause();
         }).bind(this);
@@ -425,7 +429,9 @@ function Runner(manifest_path, options) {
     this.test_types = null;
     this.manifest_iterator = null;
 
-    this.test_window = null
+    this.test_window = null;
+    this.test_frame = document.getElementById('testFrame');
+    this.run_mode = null;
 
     this.current_test = null;
     this.timeout = null;
@@ -461,12 +467,17 @@ Runner.prototype = {
         }
     },
 
-    start: function(path, test_types) {
+    start: function(path, test_types, run_mode) {
         this.pause_flag = false;
         this.path = path;
         this.test_types = test_types;
         this.manifest_iterator = new ManifestIterator(this.manifest, this.path, this.test_types);
         this.num_tests = null;
+        this.run_mode = run_mode;
+
+        if (run_mode === "iframe") {
+            this.test_frame.style.display = "block";
+        }
 
         if (this.manifest.data === null) {
             this.start_after_manifest_load = true;
@@ -476,7 +487,10 @@ Runner.prototype = {
     },
 
     do_start: function() {
-        this.open_test_window();
+        if (this.run_mode ==="window") {
+            this.open_test_window();
+        }
+
         this.start_callbacks.forEach(function(callback) {
             callback();
         });
@@ -506,7 +520,13 @@ Runner.prototype = {
     },
 
     done: function() {
-        this.test_window.close();
+        if (this.run_mode === "window") {
+            this.test_window.close();
+        } else {
+            this.test_frame.src = "";
+            this.test_frame.style.display = "none";
+        }
+
         this.done_callbacks.forEach(function(callback) {
             callback();
         });
@@ -536,10 +556,14 @@ Runner.prototype = {
     },
 
     load: function(path) {
-        if (this.test_window.location === null) {
-            this.open_test_window();
+        if (this.run_mode === "window") {
+            if (this.test_window.location === null) {
+                this.open_test_window();
+            }
+            this.test_window.location.href = this.server + path;
+        } else {
+            this.test_frame.src = this.server + path;
         }
-        this.test_window.location.href = this.server + path;
     },
 
     progress: function() {
diff --git a/tools/scripts/manifest.py b/tools/scripts/manifest.py
index b56c4ef..d3c82a1 100644
--- a/tools/scripts/manifest.py
+++ b/tools/scripts/manifest.py
@@ -8,12 +8,10 @@ import json
 import subprocess
 import logging
 
-import argparse
-
 manifest_name = "MANIFEST.json"
 exclude_php_hack = True
 ref_suffixes = ["_ref", "-ref"]
-blacklist = ["/", "/tools/", "/resources/", "/common/", "/conformance-checkers/", "/webdriver/"]
+blacklist = ["/", "/tools/", "/resources/", "/common/", "/webdriver/"]
 
 logging.basicConfig()
 logger = logging.getLogger("Web platform tests")
@@ -287,7 +285,7 @@ def get_manifest_items(rel_path):
             with open(path) as f:
                 tree = parser(f)
         except:
-            return [Helper(rel_path, url)]
+            return [Helper(rel_path, url)]
 
         if hasattr(tree, "getroot"):
             root = tree.getroot()
@@ -303,16 +301,18 @@ def get_manifest_items(rel_path):
                 except:
                     pass
 
-        if root.findall(".//{http://www.w3.org/1999/xhtml}script[@src='/resources/testharness.js']"):
-            return [TestharnessTest(rel_path, url, timeout=timeout)]
-        else:
-            match_links = root.findall(".//{http://www.w3.org/1999/xhtml}link[rel='match']")
-            mismatch_links = root.findall(".//{http://www.w3.org/1999/xhtml}link[rel='mismatch']")
-            for item in match_links + mismatch_links:
-                ref_url = item.attrib["href"]
-                ref_type = "==" if item.attrib["rel"] == "match" else "!="
-                ref_list.append(RefTest(rel_path, url, ref_url, ref_type, timeout=timeout))
-            return ref_list
+        # extra search for any src contains testharness.js
+        for xjc in root.findall(".//{http://www.w3.org/1999/xhtml}script[@src]"):
+            if xjc.get('src').find("testharness.js") != -1:
+                return [TestharnessTest(rel_path, url, timeout=timeout)]
+            else:
+                match_links = root.findall(".//{http://www.w3.org/1999/xhtml}link[rel='match']")
+                mismatch_links = root.findall(".//{http://www.w3.org/1999/xhtml}link[rel='mismatch']")
+                for item in match_links + mismatch_links:
+                    ref_url = item.attrib["href"]
+                    ref_type = "==" if item.attrib["rel"] == "match" else "!="
+                    ref_list.append(RefTest(rel_path, url, ref_url, ref_type, timeout=timeout))
+                return ref_list
 
     return [Helper(rel_path, url)]
 
@@ -349,12 +349,10 @@ def get_committed_changes(base_rev):
         data  = git("diff", "--name-status", base_rev)
         return [line.split("\t", 1) for line in data.split("\n") if line]
 
-def has_local_changes():
-    return git("status", "--porcelain", "--ignore-submodules=untracked").strip() != ""
 
 def get_local_changes():
     #This doesn't account for whole directories that have been added
-    data  = git("status", "--porcelain", "--ignore-submodules=untracked")
+    data  = git("status", "--porcelain")
     rv = LocalChanges()
     for line in data.split("\n"):
         line = line.strip()
@@ -366,12 +364,10 @@ def get_local_changes():
             continue
         if status == "??":
             status = "A"
-        elif status == "R":
+        if status == "R":
             old_path, path = tuple(item.strip() for item in path.split("->"))
             rv[old_path] = "D"
             status = "A"
-        elif status == "MM":
-            status = "M"
         rv[path] = status
     return rv
 
@@ -445,10 +441,14 @@ def update(manifest):
 
     import html5lib
 
-    sync_urls(manifest, get_committed_changes(manifest.rev))
-    sync_local_changes(manifest, get_local_changes())
+    committed_changes = get_committed_changes(manifest.rev)
+    local_changes = get_local_changes()
+
+    sync_urls(manifest, committed_changes)
+    sync_local_changes(manifest, local_changes)
 
     manifest.rev = get_current_rev()
+    manifest.local_changes = local_changes
 
 
 def write(manifest, manifest_path):
@@ -456,37 +456,18 @@ def write(manifest, manifest_path):
         json.dump(manifest.to_json(), f, indent=2)
 
 
-def update_manifest(repo_path, opts):
+def update_manifest(repo_path, out_path):
     setup_git(repo_path)
-    if not opts.rebuild:
-        manifest = load(opts.path)
-    else:
-        manifest = Manifest(None)
-
-    if has_local_changes() and not opts.experimental_include_local_changes:
-        logger.info("Not writing manifest because working directory is not clean.")
+    manifest = load(out_path)
+    update(manifest)
+    if not manifest.local_changes:
+        write(manifest, out_path)
     else:
-        logger.info("Updating manifest")
-        update(manifest)
-        write(manifest, opts.path)
-
-
-def get_parser():
-    parser = argparse.ArgumentParser()
+        logging.info("Not writing updated manifest because of local changes")
 
-    parser.add_argument("--path", default=os.path.join(get_repo_root(), "MANIFEST.json"),
-                        help="Mainifest path")
-    parser.add_argument("--rebuild", action="store_true", default=False,
-                        help="Force a full rebuild of the manifest rather than updating incrementally.")
-    parser.add_argument("--experimental-include-local-changes", action="store_true", default=False,
-                        help="Include local changes in the manifest rather than just committed changes (experimental)")
 
-    return parser
-
-def main():
+if __name__ == "__main__":
     repo_root = get_repo_root()
-    opts = get_parser().parse_args()
-    update_manifest(repo_root, opts)
+    out_dir = os.path.abspath(sys.argv[1] if len(sys.argv) > 1 else os.path.join(repo_root, "MANIFEST.json"))
+    update_manifest(repo_root, out_dir)
 
-if __name__ == "__main__":
-    main()
